// <auto-generated />
using System;
using Lab_Assignment2_WhistPointCalculator;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lab_Assignment2_WhistPointCalculator.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview3.19153.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.GamePlayers", b =>
                {
                    b.Property<string>("GamesId");

                    b.Property<string>("GamePlayersId")
                        .IsRequired();

                    b.Property<string>("PlayerId")
                        .IsRequired();

                    b.Property<int>("PlayerPosition");

                    b.Property<int>("Points");

                    b.HasKey("GamesId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlayers");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.GameRoundPlayers", b =>
                {
                    b.Property<string>("GameRoundsId");

                    b.Property<int>("ByePoints");

                    b.HasKey("GameRoundsId");

                    b.ToTable("GameRoundPlayers");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.GameRounds", b =>
                {
                    b.Property<string>("GameRoundsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DealerPositionEnded");

                    b.Property<string>("GamesId");

                    b.Property<int>("RoundNumber");

                    b.Property<int>("Started");

                    b.HasKey("GameRoundsId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameRounds");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.Games", b =>
                {
                    b.Property<string>("GamesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndedUpdated");

                    b.Property<string>("LocationId");

                    b.Property<string>("Started");

                    b.HasKey("GamesId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.Location", b =>
                {
                    b.Property<string>("LocationId");

                    b.Property<string>("Name");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.Players", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.Rounds", b =>
                {
                    b.Property<string>("GameRoundsId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("GameRoundsId");

                    b.ToTable("Rounds");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Rounds");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.SoleRoundWinner", b =>
                {
                    b.Property<string>("GameRoundsId");

                    b.HasKey("GameRoundsId");

                    b.ToTable("SoleRoundWinners");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.NormalRound", b =>
                {
                    b.HasBaseType("Lab_Assignment2_WhistPointCalculator.Rounds");

                    b.HasDiscriminator().HasValue("NormalRound");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.SoleRound", b =>
                {
                    b.HasBaseType("Lab_Assignment2_WhistPointCalculator.Rounds");

                    b.Property<string>("Soletype");

                    b.HasDiscriminator().HasValue("SoleRound");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.GamePlayers", b =>
                {
                    b.HasOne("Lab_Assignment2_WhistPointCalculator.Games", "Game")
                        .WithMany("GamePlayers")
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Lab_Assignment2_WhistPointCalculator.Players", "Player")
                        .WithMany("GamePlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.GameRoundPlayers", b =>
                {
                    b.HasOne("Lab_Assignment2_WhistPointCalculator.GameRounds", "GameRound")
                        .WithMany("GRPs")
                        .HasForeignKey("GameRoundsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.GameRounds", b =>
                {
                    b.HasOne("Lab_Assignment2_WhistPointCalculator.Games", "Game")
                        .WithMany("GameRounds")
                        .HasForeignKey("GamesId");
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.Location", b =>
                {
                    b.HasOne("Lab_Assignment2_WhistPointCalculator.Games", "Game")
                        .WithMany("Location")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.Rounds", b =>
                {
                    b.HasOne("Lab_Assignment2_WhistPointCalculator.GameRounds", "Gameround")
                        .WithMany("Rounds")
                        .HasForeignKey("GameRoundsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lab_Assignment2_WhistPointCalculator.SoleRoundWinner", b =>
                {
                    b.HasOne("Lab_Assignment2_WhistPointCalculator.GameRounds", "GameRound")
                        .WithMany("SR_Winners")
                        .HasForeignKey("GameRoundsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
